/code/ethernaut/06-Delegation/Delegation.sol
    | pragma solidity ^0.5.0;
    | 
    | contract Delegate {
    | 
    |   address public owner;
    | 
    |   constructor(address _owner) public {
    |     owner = _owner;
    |   }
    | 
    |   function pwn() public {
    |     owner = msg.sender;
    |   }
    | }
    | 
    | contract Delegation {
    | 
*   |   address public owner;
    |   Delegate delegate;
    | 
    |   constructor(address _delegateAddress) public {
    |     delegate = Delegate(_delegateAddress);
    |     owner = msg.sender;
    |   }
    | 
*   |   function() external {
*   |     (bool result, bytes memory data) = address(delegate).delegatecall(msg.data);
    |     if (result) {
    |       this;
    |     }
    |   }
    | }

/code/ethernaut/06-Delegation/Test.sol
    | // SPDX-License-Identifier: MIT
    | 
    | pragma solidity ^0.5.0;
    | 
    | import 'Delegation.sol';
*r  | 
    | contract Test is Delegation {
    |   constructor() Delegation(address(new Delegate(msg.sender))) public { }
    | 
*   |   function pwn2own() public {
    |     // this should trigger our fallback fn
*   |     address(this).call(abi.encodeWithSignature("pwn()"));
    |   }
    | 
    |   function echidna_test_owner() public returns (bool) {
    |     return owner == msg.sender;
    |   }
    | }
